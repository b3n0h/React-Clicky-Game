{"version":3,"sources":["components/nav/Nav.js","components/content/Content.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","grow","props","classes","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","Typography_default","variant","color","align","score","highScore","Content","Grid_default","item","xs","Card_default","onClick","onSelect","id","CardActionArea_default","CardContent_default","CardMedia_default","image","title","name","App","state","pokemon","alreadySelected","_this","indexOf","push","setState","sort","Math","random","_this2","this","Fragment","nav_Nav","container","spacing","map","p","components_content_Content","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAsCeA,2BA/BA,CACbC,KAAM,CACJC,SAAU,GAEZC,KAAM,CACJD,SAAU,IA0BCF,CAtBf,SAAaI,GAAO,IACVC,EAAYD,EAAZC,QACR,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQJ,MACtBK,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,SAAS,UACfL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACED,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,QAAQ,KAAKC,MAAM,UAAUN,UAAWJ,EAAQF,MAA5D,uBAGAG,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYS,MAAM,QAAQF,QAAQ,KAAKC,MAAM,UAAUN,UAAWJ,EAAQF,MAA1E,kBACkBC,EAAMa,MADxB,kBAC8Cb,EAAMc,8GCD/CC,EAjBC,SAAAf,GAAK,OACnBE,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAMc,MAAI,EAACC,GAAI,GACbhB,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAMiB,QAAS,kBAAMpB,EAAMqB,SAASrB,EAAMsB,KACxCjB,UAAU,QACVH,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,KACED,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,KACED,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CACEE,UAAU,QACVqB,MAAO1B,EAAM0B,MACbC,MAAO3B,EAAM4B,oBCkCVC,6MA3CbC,MAAQ,CACNC,UACAC,gBAAiB,GACjBlB,UAAW,EACXD,MAAO,KAGTQ,SAAW,SAAAC,GACT,IAAgD,IAA5CW,EAAKH,MAAME,gBAAgBE,QAAQZ,GAAY,CACjDW,EAAKH,MAAME,gBAAgBG,KAAKb,GAChCW,EAAKG,SAAS,CAACvB,MAAOoB,EAAKH,MAAMjB,MAAQ,IACzCoB,EAAKH,MAAMjB,OAASoB,EAAKH,MAAMhB,UAAYmB,EAAKG,SAAS,CAACtB,UAAWmB,EAAKH,MAAMhB,UAAY,IAAMmB,EAAKG,SAAS,CAACtB,UAAWmB,EAAKH,MAAMhB,YACvI,IAAMiB,EAAUE,EAAKH,MAAMC,QAAQM,KAAK,iBAAM,GAAMC,KAAKC,WACzDN,EAAKG,SAAS,CAAEL,iBAEhBE,EAAKG,SAAS,CAACvB,MAAO,EAAGmB,gBAAiB,KAC1CC,EAAKH,MAAMC,QAAQM,KAAK,iBAAM,GAAMC,KAAKC,oFAIpC,IAAAC,EAAAC,KACP,OACEvC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuC,SAAA,KACExC,EAAAC,EAAAC,cAACuC,EAAD,CACA9B,MAAO4B,KAAKX,MAAMjB,MAClBC,UAAW2B,KAAKX,MAAMhB,YAEtBZ,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAMyC,WAAS,EAACC,QAAS,IACtBJ,KAAKX,MAAMC,QAAQe,IAAI,SAAAC,GAAC,OACvB7C,EAAAC,EAAAC,cAAC4C,EAAD,CACE3B,SAAUmB,EAAKnB,SACf4B,IAAKF,EAAEzB,GACPA,GAAIyB,EAAEzB,GACNM,KAAMmB,EAAErB,MACRA,MAAOqB,EAAErB,mBApCLwB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.93f34212.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  }\r\n}\r\n\r\nfunction Nav(props) {\r\n  const { classes } = props;\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n            Pokemon Clicky Game\r\n          </Typography>\r\n          <Typography align=\"right\" variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n            Current Score: {props.score} | High Score: {props.highScore}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nNav.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Nav);","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport './Content.css'\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst Content = props => (\r\n  <Grid item xs={4}>\r\n    <Card onClick={() => props.onSelect(props.id)}\r\n      className=\"card\" >\r\n      <CardActionArea>\r\n        <CardContent>\r\n          <CardMedia\r\n            className=\"media\"\r\n            image={props.image}\r\n            title={props.name}\r\n          />\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  </Grid>\r\n)\r\n\r\nexport default Content","import React, { Component } from 'react'\nimport Nav from './components/nav'\nimport Content from './components/content'\nimport pokemon from './pokemon.json'\nimport Grid from '@material-ui/core/Grid';\n\nclass App extends Component {\n\n  state = {\n    pokemon,\n    alreadySelected: [],\n    highScore: 0,\n    score: 0\n  }\n\n  onSelect = id => {\n    if (this.state.alreadySelected.indexOf(id) === -1) {\n      this.state.alreadySelected.push(id)\n      this.setState({score: this.state.score + 1})\n      this.state.score >= this.state.highScore ? this.setState({highScore: this.state.highScore + 1}) : this.setState({highScore: this.state.highScore})\n      const pokemon = this.state.pokemon.sort(() => 0.5 - Math.random())\n      this.setState({ pokemon })\n    } else {\n      this.setState({score: 0, alreadySelected: []})\n      this.state.pokemon.sort(() => 0.5 - Math.random())\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Nav \n        score={this.state.score}\n        highScore={this.state.highScore}\n        />\n        <Grid container spacing={16}>\n          {this.state.pokemon.map(p =>\n            <Content\n              onSelect={this.onSelect}\n              key={p.id}\n              id={p.id}\n              name={p.image}\n              image={p.image}\n            />\n          )}\n        </Grid>\n      </>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}